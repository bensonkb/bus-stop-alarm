/**
 * Class DataFetcher allows for querying of OneBusAway API for
 * bus stop and bus route data relavant to Bus Stop Alarm.
 * 
 * @author Michael Eng, David Nufer
 */

package com.busstopalarm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.util.Log;

public class DataFetcher {
	// Location of REST API.
	private static final String HOST_NAME = "http://api.onebusaway.org/api/where/";
	
	// API Key needed for use of OneBusAway. Generated by OneBusAway.
	private static final String API_KEY = "v1_2XAu/HZkwK6PBLM63rgeRp34j5g=cXVhbmdodXkuZGFuZ0BnbWFpbC5jb20=";
	
	
	/** 
	 * Retrieves a list of stops corresponding to the given route id,
	 * represented as JSONObject rooted at key "stopGroupings".
	 * @param routeID
	 * @return list of stops as JSONObject, null if no such routeID.
	 */
	public JSONObject getStopsForRoute(int routeID) {
		// TODO: Currently a stub method.
		return null;
	}
	
	/**
	 * Retrieves a single stop element corresponding to the given stop id,
	 * represented as a JSONObject rooted at key "data".
	 * @param stopID
	 * @return the stop corresponding to given stop id. Otherwise null if no corresponding stop.
	 */
	public JSONObject getStopById(int stopID) {
		//TODO: Currently a stub method.
		return null;
	}
	
	/**
	 * THIS METHOD IS UNFINSIHED.  IT CURRENTLY ONLY FETCHES DATA FOR THE ZFR.
	 * Retrieves the route element from the OneBusAway API corresponding to the given
	 * route id. The route is represented as a JSONObject rooted at key "data". 
	 * 
	 * @param routeID
	 * @throws IOException
	 * @return JSONObject representing a route element in the OneBusAway API.
	 * 
	 */
	public JSONObject getRouteById(int routeID) throws IOException {
		URL u = new URL(HOST_NAME +  "route/1_" + routeID + ".xml?key=" + API_KEY);
		Scanner in = new Scanner(new InputStreamReader(u.openStream()));
		//StringBuilder sb = new StringBuilder();
		
		String xmlString = "";
		while (in.hasNextLine()) {
			xmlString += in.nextLine();
		}
		Log.i("Client: ", xmlString);
		return null;
	}
	
	/**
	 * Retrieves the list of polylines for the given route.
	 * @param RouteID is the bus route id of the route in Seattle.
	 * @return ArrayList of polylines containing the encoded polyline and the encoded level.
	 *         List is empty if there are now line for given route id.
	 * 
	 */
	public List<Polyline> getPolylines(int routeID)throws IOException {
		ArrayList<Polyline> polylines = new ArrayList<Polyline>();
		JSONObject json = null;
		
		// HTTP GET request for the polylines in JSON format.
		try {
			URL url = new URL(HOST_NAME + "stops-for-route/1_" + routeID + ".json?key=" + API_KEY);
			System.out.println(url.toString());
			URLConnection connection = url.openConnection();
			InputStream inStream = connection.getInputStream();
			json = new JSONObject(convertStreamToString(inStream));
		} catch (IOException e) {
			System.out.println("Error: Connecting to the One Bus Away API.");
			throw e;
		} catch(JSONException e) {
			System.out.println("Error: Converting response into JSONObject");
			return polylines;
		}
		
		// Retrieve the list of polylines from the JSON response.
		try {
			// Check to see if response code.
			String text = json.getString("text");
			if(!text.equals("OK")) {
				return polylines;
			}
			
			
			JSONObject data = json.getJSONObject("data");
			JSONArray polylineArray = data.getJSONArray("polylines");
			
			// Add all polylines to our collection.
			for(int i = 0; i < polylineArray.length(); i++) {
				if(!polylineArray.isNull(i)) {
					JSONObject polyline = polylineArray.getJSONObject(i);
					String line = polyline.getString("points");
					int length = polyline.getInt("length");
					polylines.add(new Polyline(line, length));
				}
			}
		} catch (Exception e) {
			System.out.println("Error getting polylines from json response.");
		}
		
		return polylines;
	}
	
	
	/**
	 * Converts an InputStream into a String
	 * @param inStream
	 * @return the converted string
	 * @throws IOException
	 */
	private String convertStreamToString(InputStream inStream) throws IOException {
		/*
		 * To convert the InputStream to String we use the
		 * BufferedReader.readLine() method. We iterate until the BufferedReader
		 * return null which means there's no more data to read. Each line will
		 * appended to a StringBuilder and returned as String.
		 */
		if (inStream != null) {
			StringBuilder sb = new StringBuilder();
			String line;

			try {
				BufferedReader reader = new BufferedReader(
						new InputStreamReader(inStream, "UTF-8"));
				while ((line = reader.readLine()) != null) {
					sb.append(line).append("\n");
				}
			} finally {
				inStream.close();
			}
			return sb.toString();
		} else {
			return "";
		}
	}
}
